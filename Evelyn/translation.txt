import pyperclip
import pyttsx3
import time
import asyncio
from googletrans import Translator, LANGUAGES

engine = pyttsx3.init()
translator = Translator()

def speak(text):
    """Convert text to speech."""
    engine.say(text)
    engine.runAndWait()

def get_language_code():
    """Ask the user for the target language and return the language code."""
    print("\nAvailable Languages: ")
    for code, lang in LANGUAGES.items():
        print(f"{lang.title()} ({code})", end=" | ")

    speak("In which language do you want to translate?")
    target_lang = input("\n\nEnter language name (e.g., French, Hindi, Spanish): ").strip().lower()

    # Find the language code
    for code, lang in LANGUAGES.items():
        if target_lang == lang.lower():
            return code

    print("Invalid language. Defaulting to English.")
    return "en"  # Default to English if language is invalid

async def translate_text(text, target_lang):
    """Asynchronously translate text into the selected language."""
    try:
        translation = await translator.translate(text, dest=target_lang)
        return translation.text
    except Exception as e:
        return f"Error: {e}"

def monitor_clipboard(target_language):
    """Continuously monitor clipboard for text and translate it."""
    last_clipboard = ""

    while True:
        time.sleep(2)  # Check clipboard every 2 seconds
        copied_text = pyperclip.paste()

        if copied_text and copied_text != last_clipboard:
            last_clipboard = copied_text
            speak("Text detected. Translating...")

            # Use asyncio to run the async function
            translated_text = asyncio.run(translate_text(copied_text, target_language))

            if len(translated_text) > 100:
                with open("translation.txt", "w", encoding="utf-8") as file:
                    file.write(translated_text)
                speak("The translation is too long. It has been saved in 'translation.txt'.")
            else:
                print(f"\nTranslation ({target_language}):", translated_text)
                speak(translated_text)

if __name__ == "__main__":
    speak("Welcome to the clipboard translator.")
    target_language = get_language_code()  # Ask for the language
    speak(f"Translation will be in {LANGUAGES.get(target_language, 'English')}. Copy the text you want to translate.")
    monitor_clipboard(target_language)